        OCaml version 4.05.0

# val ormap : ('a -> bool) -> 'a list -> bool = <fun>
val andmap : ('a -> bool) -> 'a list -> bool = <fun>
val lowercase_ascii : char -> char = <fun>
val string_to_list : string -> char list = <fun>
val list_to_string : char list -> string = <fun>
module PC :
  sig
    exception X_not_yet_implemented
    exception X_no_match
    val const : ('a -> bool) -> 'a list -> 'a * 'a list
    val caten : ('a -> 'b * 'c) -> ('c -> 'd * 'e) -> 'a -> ('b * 'd) * 'e
    val pack : ('a -> 'b * 'c) -> ('b -> 'd) -> 'a -> 'd * 'c
    val nt_epsilon : 'a -> 'b list * 'a
    val caten_list : ('a -> 'b * 'a) list -> 'a -> 'b list * 'a
    val disj : ('a -> 'b) -> ('a -> 'b) -> 'a -> 'b
    val nt_none : 'a -> 'b
    val disj_list : ('a -> 'b) list -> 'a -> 'b
    val delayed : (unit -> 'a -> 'b) -> 'a -> 'b
    val nt_end_of_input : 'a list -> 'b list * 'c list
    val star : ('a -> 'b * 'a) -> 'a -> 'b list * 'a
    val plus : ('a -> 'b * 'a) -> 'a -> 'b list * 'a
    val guard : ('a -> 'b * 'c) -> ('b -> bool) -> 'a -> 'b * 'c
    val diff : ('a -> 'b) -> ('a -> 'c) -> 'a -> 'b
    val not_followed_by : ('a -> 'b * 'c) -> ('c -> 'd) -> 'a -> 'b * 'c
    val maybe : ('a -> 'b * 'a) -> 'a -> 'b option * 'a
    val make_char : ('a -> 'b -> bool) -> 'a -> 'b list -> 'b * 'b list
    val char : char -> char list -> char * char list
    val char_ci : char -> char list -> char * char list
    val make_word : (char -> 'a -> 'b * 'a) -> string -> 'a -> 'b list * 'a
    val word : string -> char list -> char list * char list
    val word_ci : string -> char list -> char list * char list
    val make_one_of : (char -> 'a -> 'b) -> string -> 'a -> 'b
    val one_of : string -> char list -> char * char list
    val one_of_ci : string -> char list -> char * char list
    val nt_whitespace : char list -> char * char list
    val make_range :
      (char -> char -> bool) -> char -> char -> char list -> char * char list
    val range : char -> char -> char list -> char * char list
    val range_ci : char -> char -> char list -> char * char list
    val nt_any : char list -> char * char list
    val trace_pc :
      string -> (char list -> 'a * char list) -> char list -> 'a * char list
    val test_string : (char list -> 'a * char list) -> string -> 'a * string
  end
exception X_not_yet_implemented
exception X_this_should_not_happen
type number = Fraction of int * int | Float of float
type sexpr =
    Bool of bool
  | Nil
  | Number of number
  | Char of char
  | String of string
  | Symbol of string
  | Pair of sexpr * sexpr
val sexpr_eq : sexpr -> sexpr -> bool = <fun>
module Reader : sig val read_sexprs : string -> sexpr list end
# #       val read_and_print : string -> sexpr list = <fun>
#   ======
Read input:{1}
- : sexpr list = [Number (Fraction (1, 1))]
# ======
Read input:{  1}
- : sexpr list = [Number (Fraction (1, 1))]
# ======
Read input:{  1  }
- : sexpr list = [Number (Fraction (1, 1))]
# ======
Read input:{01234}
- : sexpr list = [Number (Fraction (1234, 1))]
# ======
Read input:{001234}
- : sexpr list = [Number (Fraction (1234, 1))]
# ======
Read input:{-12}
- : sexpr list = [Number (Fraction (-12, 1))]
# ======
Read input:{-012}
- : sexpr list = [Number (Fraction (-12, 1))]
# ======
Read input:{+1234}
- : sexpr list = [Number (Fraction (1234, 1))]
# ======
Read input:{+00940}
- : sexpr list = [Number (Fraction (940, 1))]
# ======
Read input:{1/1}
- : sexpr list = [Number (Fraction (1, 1))]
# ======
Read input:{2/4}
- : sexpr list = [Number (Fraction (1, 2))]
# ======
Read input:{-17/6}
- : sexpr list = [Number (Fraction (-17, 6))]
# ======
Read input:{+006/012}
- : sexpr list = [Number (Fraction (1, 2))]
#   ======
Read input:{+1e1}
- : sexpr list = [Number (Float 10.)]
# ======
Read input:{1E+1}
- : sexpr list = [Number (Float 10.)]
# ======
Read input:{10e-1}
- : sexpr list = [Number (Float 1.)]
# ======
Read input:{3.14e+9}
- : sexpr list = [Number (Float 3140000000.)]
# ======
Read input:{3.14E-512}
- : sexpr list = [Number (Float 0.)]
# ======
Read input:{+0000012.3E0000000000002}
- : sexpr list = [Number (Float 1230.)]
# ======
Read input:{-5.000000e-2}
- : sexpr list = [Number (Float (-0.05))]
# ======
Read input:{+5.000000e1}
- : sexpr list = [Number (Float 50.)]
#   ======
Read input:{1.0}
- : sexpr list = [Number (Float 1.)]
# ======
Read input:{  1.0  }
- : sexpr list = [Number (Float 1.)]
# ======
Read input:{005.01290}
- : sexpr list = [Number (Float 5.0129)]
# ======
Read input:{501.000000}
- : sexpr list = [Number (Float 501.)]
# ======
Read input:{+999.009000}
- : sexpr list = [Number (Float 999.009)]
# ======
Read input:{-001.000123000}
- : sexpr list = [Number (Float (-1.000123))]
#   ======
Read input:{#t}
- : sexpr list = [Bool true]
# ======
Read input:{#f}
- : sexpr list = [Bool false]
# ======
Read input:{#t#t}
- : sexpr list = [Bool true; Bool true]
# ======
Read input:{ #t #t}
- : sexpr list = [Bool true; Bool true]
#   ======
Read input:{1a^}
- : sexpr list = [Symbol "1a^"]
# ======
Read input:{ 1a^   }
- : sexpr list = [Symbol "1a^"]
# ======
Read input:{1a<:}
- : sexpr list = [Symbol "1a<:"]
# ======
Read input:{AbC}
- : sexpr list = [Symbol "abc"]
# ======
Read input:{a1+3====1.1}
- : sexpr list = [Symbol "a1+3====1.1"]
# ======
Read input:{..}
- : sexpr list = [Symbol ".."]
# ======
Read input:{..123Ac^}
- : sexpr list = [Symbol "..123ac^"]
# ======
Read input:{..123ac^}
======
Read input:{..123Ac^}
- : bool = true
#   ======
Read input:{""}
- : sexpr list = [String ""]
# ======
Read input:{"    "}
- : sexpr list = [String "    "]
# ======
Read input:{   ""    }
- : sexpr list = [String ""]
# ======
Read input:{"hello . ^ . "}
- : sexpr list = [String "hello . ^ . "]
# ======
Read input:{"hello . ^ [] ; a {} #@"}
- : sexpr list = [String "hello . ^ [] ; a {} #@"]
# ======
Read input:{"\r"}
- : sexpr list = [String "\r"]
# ======
Read input:{"\n"}
- : sexpr list = [String "\n"]
# ======
Read input:{"\t"}
- : sexpr list = [String "\t"]
# ======
Read input:{"\f"}
- : sexpr list = [String "\012"]
# ======
Read input:{"\\"}
- : sexpr list = [String "\\"]
#   ======
Read input:{#\a}
- : sexpr list = [Char 'a']
# ======
Read input:{   #\a }
- : sexpr list = [Char 'a']
# ======
Read input:{#\A}
- : sexpr list = [Char 'A']
# ======
Read input:{#\A}
======
Read input:{#\a}
- : bool = true
# ======
Read input:{#\nul}
- : sexpr list = [Char '\000']
# ======
Read input:{#\newline}
- : sexpr list = [Char '\n']
# ======
Read input:{#\return}
- : sexpr list = [Char '\r']
# ======
Read input:{#\tab}
- : sexpr list = [Char '\t']
# ======
Read input:{#\page}
- : sexpr list = [Char '\012']
# ======
Read input:{#\space}
- : sexpr list = [Char ' ']
#   ======
Read input:{'1}
- : sexpr list =
[Pair (Symbol "quote", Pair (Number (Fraction (1, 1)), Nil))]
# ======
Read input:{'3+2}
- : sexpr list = [Pair (Symbol "quote", Pair (Symbol "3+2", Nil))]
# ======
Read input:{'(a 1 . a)}
- : sexpr list =
[Pair (Symbol "quote",
  Pair (Pair (Symbol "a", Pair (Number (Fraction (1, 1)), Symbol "a")), Nil))]
#   ======
Read input:{`1}
- : sexpr list =
[Pair (Symbol "quasiquote", Pair (Number (Fraction (1, 1)), Nil))]
# ======
Read input:{`3+2}
- : sexpr list = [Pair (Symbol "quasiquote", Pair (Symbol "3+2", Nil))]
# ======
Read input:{`(a 1 . a)}
- : sexpr list =
[Pair (Symbol "quasiquote",
  Pair (Pair (Symbol "a", Pair (Number (Fraction (1, 1)), Symbol "a")), Nil))]
#   ======
Read input:{,1}
- : sexpr list =
[Pair (Symbol "unquote", Pair (Number (Fraction (1, 1)), Nil))]
# ======
Read input:{,3+2}
- : sexpr list = [Pair (Symbol "unquote", Pair (Symbol "3+2", Nil))]
# ======
Read input:{,(a 1 . a)}
- : sexpr list =
[Pair (Symbol "unquote",
  Pair (Pair (Symbol "a", Pair (Number (Fraction (1, 1)), Symbol "a")), Nil))]
#   ======
Read input:{`'(1)}
- : sexpr list =
[Pair (Symbol "quasiquote",
  Pair
   (Pair (Symbol "quote", Pair (Pair (Number (Fraction (1, 1)), Nil), Nil)),
   Nil))]
# ======
Read input:{`(1 ,@(+ 1 2))}
- : sexpr list =
[Pair (Symbol "quasiquote",
  Pair
   (Pair (Number (Fraction (1, 1)),
     Pair
      (Pair (Symbol "unquote-splicing",
        Pair
         (Pair (Symbol "+",
           Pair (Number (Fraction (1, 1)),
            Pair (Number (Fraction (2, 1)), Nil))),
         Nil)),
      Nil)),
   Nil))]
#   ======
Read input:{(   1 )}
- : sexpr list = [Pair (Number (Fraction (1, 1)), Nil)]
# ======
Read input:{(1 2 "a")}
- : sexpr list =
[Pair (Number (Fraction (1, 1)),
  Pair (Number (Fraction (2, 1)), Pair (String "a", Nil)))]
# ======
Read input:{(1aC +2.3e1 "a")}
- : sexpr list =
[Pair (Symbol "1ac", Pair (Number (Float 23.), Pair (String "a", Nil)))]
#   ======
Read input:{(1 . 2)}
- : sexpr list = [Pair (Number (Fraction (1, 1)), Number (Fraction (2, 1)))]
# ======
Read input:{(#t . #\A)}
- : sexpr list = [Pair (Bool true, Char 'A')]
# ======
Read input:{("#tab hello" #t . #\A)}
- : sexpr list = [Pair (String "#tab hello", Pair (Bool true, Char 'A'))]
# ======
Read input:{(a a a)}
- : sexpr list =
[Pair (Symbol "a", Pair (Symbol "a", Pair (Symbol "a", Nil)))]
#   ======
Read input:{(a a a `(1 . '(#\tab abC . 3))) (+ 1 2)}
- : sexpr list =
[Pair (Symbol "a",
  Pair (Symbol "a",
   Pair (Symbol "a",
    Pair
     (Pair (Symbol "quasiquote",
       Pair
        (Pair (Number (Fraction (1, 1)),
          Pair (Symbol "quote",
           Pair
            (Pair (Char '\t', Pair (Symbol "abc", Number (Fraction (3, 1)))),
            Nil))),
        Nil)),
     Nil))));
 Pair (Symbol "+",
  Pair (Number (Fraction (1, 1)), Pair (Number (Fraction (2, 1)), Nil)))]
#   ======
Read input:{()}
- : sexpr list = [Nil]
# ======
Read input:{(    )}
- : sexpr list = [Nil]
# ======
Read input:{( ;comment
 ;comment
)}
- : sexpr list = [Nil]
# ======
Read input:{( ;comment
 ;comment
 a)}
- : sexpr list = [Pair (Symbol "a", Nil)]
# ======
Read input:{( ;comment
 ;comment
 #;(+ 1 2) a)}
- : sexpr list = [Pair (Symbol "a", Nil)]
# ======
Read input:{    ;commnet
 #;(()) '  ;c
  #;5.2 hello }
- : sexpr list = [Pair (Symbol "quote", Pair (Symbol "hello", Nil))]
#   ======
Read input:{(a);quasiqute next line
`(a 'hello . ,@(+ 1 2))}
- : sexpr list =
[Pair (Symbol "a", Nil);
 Pair (Symbol "quasiquote",
  Pair
   (Pair (Symbol "a",
     Pair (Pair (Symbol "quote", Pair (Symbol "hello", Nil)),
      Pair (Symbol "unquote-splicing",
       Pair
        (Pair (Symbol "+",
          Pair (Number (Fraction (1, 1)),
           Pair (Number (Fraction (2, 1)), Nil))),
        Nil)))),
   Nil))]
# ======
Read input:{  ;
   #;() (   ;commnet
 #;(()) '  ;c
  #;5.2 hello  #;1 ;;;;
   #;aaa bbb"aa"#t  .  64.0 ;ccc
 #;aa ) }
- : sexpr list =
[Pair (Pair (Symbol "quote", Pair (Symbol "hello", Nil)),
  Pair (Symbol "bbb",
   Pair (String "aa", Pair (Bool true, Number (Float 64.)))))]
# ======
Read input:{  ; 
 #;11 (     #;#;#;aa"a"(#t#f"b")    ;gggg
   ;
 #;1 ;
    ;;;
 ;
 #;#;a 11 )}
- : sexpr list = [Nil]
#         
===========
Those need to be excptions

======
Read input:{.}
Exception: PC.X_no_match.
# ======
Read input:{#ta}
Exception: PC.X_no_match.
# ======
Read input:{"\"}
Exception: PC.X_no_match.
# 
======
Read input:{(1 . 2 . 3)}
Exception: PC.X_no_match.
